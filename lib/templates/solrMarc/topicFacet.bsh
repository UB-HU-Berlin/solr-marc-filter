/**
 * Custom script fuer topic_facets (nur Sachschlagworte)
 *
 * This can be used to override built-in SolrMarc custom functions.  If you change
 * this script, you will need to activate it in import/marc_local.properties before
 * it will be applied during indexing.
 */
import org.marc4j.marc.Record;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.DataField;
import org.marc4j.marc.Subfield;

import org.marc4j.marc.*;
org.solrmarc.index.SolrIndexer indexer = null;

/**
 * Hole das Sachschlagwort aus 689|a (wenn 689|d != z oder f)
 *
 * @param  Record    record
 * @return Set    "topic_facet"
 */
public Set getTopic(Record record) {
	Set result = new LinkedHashSet();
	String topic_string="";
    // Check 689 subfield a and d
    List fields = record.getVariableFields("689");
    Iterator fieldsIter = fields.iterator();
    
    if (fields != null) {
        DataField field;
	
        while(fieldsIter.hasNext()) {
            field = (DataField) fieldsIter.next();
	    
            if (field.getSubfield('d') != null) {
               //System.out.println("689|d: " + field.getSubfield('d').getData());
               topic_string = field.getSubfield('d').getData().toLowerCase();
            
	       if (!topic_string.equals("f") && !topic_string.equals("z")) {
               		//System.out.println("689|a: " + field.getSubfield('a').getData());
        	    	if (field.getSubfield('a') != null) {
                	   	result.add(field.getSubfield('a').getData());
                	   	//System.out.println("689|a: " + field.getSubfield('a').getData());
            		}
               }
            }
        }
    }    
    return result;
}

/*
* Hole das Schlagwort aus 689|a
 *
 * @param  Record record
 * @param  String typeOfKeyword:
 * 			c Körperschaft, deren Ansetzungsform mit einem Geographikum beginnt
 * 			f Formschlagwort
 * 			g Geographisches/ethnographisches Schlagwort, Sprachbezeichnung
 * 			k Körperschaft (soweit nicht c)
 * 			p Personenschlagwort (in der PND durch die Satzart tp ersetzt)
 * 			s Sachschlagwort
 * 			t Titel eines Werkes
 * 			z Zeitschlagwort 
 * @return String keywords
*/

public String getKeywords(Record record, String typeOfKeyword) {
    Set result = new LinkedHashSet();
    	
    List fields = record.getVariableFields("689");
    Iterator fieldsIter = fields.iterator();
    
    String keywords = "";
    String delimiter = "#";
    
    if (fields != null) {
        DataField field;
	
        while(fieldsIter.hasNext()) {
            field = (DataField) fieldsIter.next();
	    	    
	    List keysL = field.getSubfields('a');
      	    if(keysL.size() >= 2 && keysL.get(0).getData().equals(typeOfKeyword)){
		
		for(int i = 1; i<keysL.size(); i++){
			if(keywords.equals("")){
			    keywords += keysL.get(i).getData();
			}
			else{
			    keywords += delimiter+keysL.get(i).getData();
			}	    
		}
	    }
	    System.err.println(keywords);
	    System.err.println(keysL);
	}
    }
    return keywords;
}

